name: GitHub Agent

on:
  # Issue events
  issues:
    types:
      [
        opened,
        edited,
        closed,
        reopened,
        assigned,
        unassigned,
        labeled,
        unlabeled,
      ]

  # Issue comment events
  issue_comment:
    types: [created, edited, deleted]

  # Pull request events
  pull_request:
    types: [opened, closed, edited, reopened, synchronize, ready_for_review]

  # Pull request review events
  pull_request_review:
    types: [submitted, edited]

  # Pull request review comment events
  pull_request_review_comment:
    types: [created, edited]

  # Manual workflow dispatch
  workflow_dispatch:
    inputs:
      message:
        description: "Message to pass to the agent"
        required: false
        default: "Analyze the repository status, check for any issues that need attention, and take proactive actions to improve the repository health."
        type: string

  # Schedule for periodic tasks
  schedule:
    - cron: "0 9 * * MON" # Weekly on Monday at 9 AM UTC

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  discussions: write
  checks: write
  statuses: write
  repository-projects: write
  packages: write
  deployments: write
  pages: write
  security-events: write

jobs:
  run-agent:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better context

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-strands-agents
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install OpenAI first (critical dependency)
          pip install openai>=1.0.0
          # Install Strands Agents
          pip install strands-agents strands-agents-tools
          # Install requirements.txt if exists
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Verify installations
          echo "Installed packages:"
          pip list | grep -E "(strands|openai)"

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Agent"
          git config --global user.email "github-agent@users.noreply.github.com"

      - name: Prepare agent message
        run: |
          EVENT_TYPE="${{ github.event_name }}"

          if [[ "$EVENT_TYPE" == "workflow_dispatch" ]]; then
            MESSAGE="${{ github.event.inputs.message }}"
            if [[ -z "$MESSAGE" ]]; then
              MESSAGE="Analyze the repository status, check for any issues that need attention, and take proactive actions to improve the repository health."
            fi
            echo "AGENT_MESSAGE=$MESSAGE" >> $GITHUB_ENV
          else
            # Simplified event handling
            case "$EVENT_TYPE" in
              issues)
                echo "AGENT_MESSAGE=Handle issue #${{ github.event.issue.number }}: '${{ github.event.issue.title }}' was ${{ github.event.action }}. Please analyze and take appropriate action." >> $GITHUB_ENV
                ;;
              issue_comment)
                echo "AGENT_MESSAGE=Handle comment on issue #${{ github.event.issue.number }}. Please review and respond if appropriate." >> $GITHUB_ENV
                ;;
              pull_request)
                echo "AGENT_MESSAGE=Handle pull request #${{ github.event.pull_request.number }}: '${{ github.event.pull_request.title }}' was ${{ github.event.action }}. Please review and take appropriate action." >> $GITHUB_ENV
                ;;
              pull_request_review|pull_request_review_comment)
                echo "AGENT_MESSAGE=Handle PR review activity on #${{ github.event.pull_request.number }}. Please analyze and respond appropriately." >> $GITHUB_ENV
                ;;
              *)
                echo "AGENT_MESSAGE=Handle GitHub event: $EVENT_TYPE. Please analyze the repository status and take appropriate action." >> $GITHUB_ENV
                ;;
            esac
          fi

          echo "Prepared message: $AGENT_MESSAGE"

      - name: Run GitHub Agent
        env:
          # GitHub tokens and context
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}

          # OpenAI configuration
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL_ID: ${{ vars.OPENAI_MODEL_ID || 'gpt-4o-mini' }}
          OPENAI_MAX_TOKENS: "4000"

          # Strands configuration
          BYPASS_TOOL_CONSENT: "true"
          STRANDS_TOOL_CONSOLE_MODE: "enabled"

          # Agent message
          AGENT_MESSAGE: ${{ env.AGENT_MESSAGE }}

        run: |
          echo "🤖 Starting GitHub Agent..."
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Event: $GITHUB_EVENT_NAME"
          echo "Message: $AGENT_MESSAGE"
          echo "Token available: $([ -n "$GITHUB_TOKEN" ] && echo "YES" || echo "NO")"
          echo "Token length: ${#GITHUB_TOKEN}"
          echo ""

          # Run the agent with the prepared message
          python -u agent.py "$AGENT_MESSAGE"

      - name: Create workflow summary
        if: always()
        run: |
          echo "## 🤖 GitHub Agent Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ **Status:** Completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Failed or cancelled" >> $GITHUB_STEP_SUMMARY
          fi
