#!/usr/bin/env python3
"""
Agent Actions Module
Predefined actions for GitHub repository management
"""

import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from github_api import GitHubAPI

class GitHubAgentActions:
    """Predefined actions for GitHub repository management"""
    
    def __init__(self):
        self.github = GitHubAPI()
        self.repo_name = self.github.repo.split('/')[-1]
        self.owner = self.github.actor
    
    def analyze_repository_health(self) -> Dict:
        """Analyze repository health and return recommendations"""
        print("🔍 Analyzing repository health...")
        
        # Get repository info
        repo_info = self.github.get_repo_info()
        issues = self.github.get_issues()
        prs = self.github.get_pull_requests()
        
        analysis = {
            "repo_info": repo_info,
            "open_issues": len(issues) if issues else 0,
            "open_prs": len(prs) if prs else 0,
            "recommendations": []
        }
        
        # Check for missing documentation
        content = self.github.get_repository_content()
        files = [item['name'].lower() for item in content] if content else []
        
        if 'readme.md' not in files:
            analysis["recommendations"].append("Add README.md file")
        
        if 'contributing.md' not in files:
            analysis["recommendations"].append("Add CONTRIBUTING.md file")
        
        if 'license' not in files and 'license.md' not in files:
            analysis["recommendations"].append("Add LICENSE file")
        
        # Check for GitHub templates
        github_dir = self.github.get_repository_content(".github")
        if not github_dir:
            analysis["recommendations"].append("Add .github directory with templates")
        
        return analysis
    
    def create_health_improvement_issue(self) -> Optional[Dict]:
        """Create a comprehensive repository health improvement issue"""
        analysis = self.analyze_repository_health()
        
        if not analysis["recommendations"]:
            print("✅ Repository health looks good!")
            return None
        
        # Create detailed issue body
        body = f"""## 🚀 Repository Health Improvement Plan

**Automated Analysis Results:**
- Open Issues: {analysis['open_issues']}
- Open Pull Requests: {analysis['open_prs']}

### 📋 Recommended Improvements:

"""
        
        for i, rec in enumerate(analysis["recommendations"], 1):
            body += f"{i}. [ ] {rec}\n"
        
        body += f"""
### 🎯 Benefits:
- Improved developer experience
- Better project documentation
- Enhanced maintainability
- Professional repository appearance

### 📅 Timeline:
- **Created:** {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}
- **Target:** Complete within 1 week

---
*This issue was created automatically by the GitHub Agent to improve repository health.*
"""
        
        return self.github.create_issue(
            title="🚀 Repository Health & Documentation Improvements",
            body=body,
            assignees=[self.owner],
            labels=["enhancement", "documentation", "maintenance"]
        )
    
    def create_documentation_issues(self) -> List[Dict]:
        """Create specific documentation improvement issues"""
        issues_created = []
        
        # README improvement
        readme_issue = self.github.create_issue(
            title="📚 Enhance README Documentation",
            body=f"""## 📖 README Enhancement Proposal

### Current Status:
The README needs improvement to better serve developers and users.

### Proposed Improvements:
- [ ] Add clear project description
- [ ] Include installation instructions
- [ ] Add usage examples
- [ ] Document API/features
- [ ] Add badges (build status, version, etc.)
- [ ] Include contribution guidelines link
- [ ] Add license information

### Benefits:
- Better first impression for new users
- Clearer onboarding process
- Improved project discoverability

### Acceptance Criteria:
- [ ] README follows best practices
- [ ] All sections are complete and accurate
- [ ] Examples are tested and working

---
*Auto-generated by GitHub Agent on {datetime.now().strftime('%Y-%m-%d')}*
""",
            assignees=[self.owner],
            labels=["documentation", "enhancement", "good first issue"]
        )
        if readme_issue:
            issues_created.append(readme_issue)
        
        # Contributing guidelines
        contributing_issue = self.github.create_issue(
            title="🤝 Add Contributing Guidelines",
            body=f"""## 🤝 Contributing Guidelines Needed

### Purpose:
Create comprehensive contributing guidelines to help new contributors.

### Tasks:
- [ ] Create CONTRIBUTING.md file
- [ ] Define code style guidelines
- [ ] Document development setup process
- [ ] Add pull request template
- [ ] Include issue reporting guidelines
- [ ] Define review process

### Content to Include:
1. **Getting Started**
   - Fork and clone instructions
   - Development environment setup
   
2. **Making Changes**
   - Branch naming conventions
   - Commit message format
   - Code style requirements
   
3. **Submitting Changes**
   - Pull request process
   - Review criteria
   - Testing requirements

### Resources:
- [GitHub's Contributing Guide Template](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors)

---
*Auto-generated by GitHub Agent on {datetime.now().strftime('%Y-%m-%d')}*
""",
            assignees=[self.owner],
            labels=["documentation", "community", "enhancement"]
        )
        if contributing_issue:
            issues_created.append(contributing_issue)
        
        return issues_created
    
    def create_ci_cd_improvement_issue(self) -> Optional[Dict]:
        """Create CI/CD improvement issue"""
        return self.github.create_issue(
            title="⚙️ Enhance CI/CD Pipeline",
            body=f"""## ⚙️ CI/CD Pipeline Improvements

### Current State:
Review and enhance the current CI/CD setup for better automation.

### Proposed Improvements:
- [ ] Add automated testing workflow
- [ ] Implement code quality checks (linting, formatting)
- [ ] Add security scanning
- [ ] Set up automated dependency updates
- [ ] Configure release automation
- [ ] Add performance testing
- [ ] Implement deployment automation

### Workflow Suggestions:
1. **Testing Pipeline**
   - Unit tests
   - Integration tests
   - Code coverage reporting
   
2. **Quality Assurance**
   - ESLint/Pylint for code quality
   - Prettier/Black for formatting
   - Security vulnerability scanning
   
3. **Automation**
   - Dependabot for dependency updates
   - Automated releases with semantic versioning
   - Deploy previews for pull requests

### Benefits:
- Improved code quality
- Faster development cycle
- Reduced manual errors
- Better security posture

---
*Auto-generated by GitHub Agent on {datetime.now().strftime('%Y-%m-%d')}*
""",
            assignees=[self.owner],
            labels=["enhancement", "ci/cd", "automation"]
        )
    
    def create_weekly_status_issue(self) -> Optional[Dict]:
        """Create weekly repository status report"""
        analysis = self.analyze_repository_health()
        
        # Get recent activity
        issues = self.github.get_issues("all")
        recent_issues = []
        if issues:
            week_ago = datetime.now() - timedelta(days=7)
            for issue in issues[:10]:  # Last 10 issues
                created_at = datetime.fromisoformat(issue['created_at'].replace('Z', '+00:00'))
                if created_at >= week_ago:
                    recent_issues.append(issue)
        
        body = f"""## 📊 Weekly Repository Status Report

**Report Date:** {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}

### 📈 Repository Statistics:
- **Open Issues:** {analysis['open_issues']}
- **Open Pull Requests:** {analysis['open_prs']}
- **New Issues This Week:** {len(recent_issues)}

### 🎯 Recent Activity:
"""
        
        if recent_issues:
            for issue in recent_issues[:5]:
                body += f"- #{issue['number']}: {issue['title']}\n"
        else:
            body += "- No new issues this week\n"
        
        body += f"""
### 🔍 Health Check:
"""
        
        if analysis["recommendations"]:
            body += "**Areas for Improvement:**\n"
            for rec in analysis["recommendations"]:
                body += f"- {rec}\n"
        else:
            body += "✅ Repository health looks good!\n"
        
        body += f"""
### 📅 Next Week Goals:
- [ ] Address any critical issues
- [ ] Review and merge pending PRs
- [ ] Continue documentation improvements
- [ ] Monitor repository health

---
*This is an automated weekly report generated by GitHub Agent.*
*Next report will be generated on {(datetime.now() + timedelta(days=7)).strftime('%Y-%m-%d')}*
"""
        
        return self.github.create_issue(
            title=f"📊 Weekly Status Report - {datetime.now().strftime('%Y-%m-%d')}",
            body=body,
            assignees=[self.owner],
            labels=["report", "weekly", "status"]
        )
    
    def setup_repository_labels(self) -> List[Dict]:
        """Create standard repository labels"""
        standard_labels = [
            {"name": "bug", "color": "d73a4a", "description": "Something isn't working"},
            {"name": "documentation", "color": "0075ca", "description": "Improvements or additions to documentation"},
            {"name": "enhancement", "color": "a2eeef", "description": "New feature or request"},
            {"name": "good first issue", "color": "7057ff", "description": "Good for newcomers"},
            {"name": "help wanted", "color": "008672", "description": "Extra attention is needed"},
            {"name": "maintenance", "color": "fbca04", "description": "Repository maintenance tasks"},
            {"name": "priority: high", "color": "b60205", "description": "High priority issue"},
            {"name": "priority: low", "color": "0e8a16", "description": "Low priority issue"},
            {"name": "status: in progress", "color": "fbca04", "description": "Currently being worked on"},
            {"name": "status: needs review", "color": "0052cc", "description": "Needs code review"},
        ]
        
        created_labels = []
        existing_labels = self.github.get_labels()
        existing_names = [label['name'] for label in existing_labels] if existing_labels else []
        
        for label in standard_labels:
            if label['name'] not in existing_names:
                created = self.github.create_label(
                    name=label['name'],
                    color=label['color'],
                    description=label['description']
                )
                if created:
                    created_labels.append(created)
        
        return created_labels
    
    def create_milestone_for_improvements(self) -> Optional[Dict]:
        """Create a milestone for repository improvements"""
        due_date = (datetime.now() + timedelta(days=30)).isoformat()
        
        return self.github.create_milestone(
            title="Repository Health Improvements",
            description="Milestone for tracking repository health and documentation improvements",
            due_on=due_date
        )
    
    def run_full_health_check(self) -> Dict:
        """Run complete repository health check and create necessary issues"""
        print("🚀 Running full repository health check...")
        
        results = {
            "analysis": self.analyze_repository_health(),
            "actions_taken": []
        }
        
        # Create main health improvement issue
        health_issue = self.create_health_improvement_issue()
        if health_issue:
            results["actions_taken"].append(f"Created health improvement issue #{health_issue['number']}")
        
        # Create documentation issues
        doc_issues = self.create_documentation_issues()
        for issue in doc_issues:
            results["actions_taken"].append(f"Created documentation issue #{issue['number']}")
        
        # Create CI/CD issue
        cicd_issue = self.create_ci_cd_improvement_issue()
        if cicd_issue:
            results["actions_taken"].append(f"Created CI/CD improvement issue #{cicd_issue['number']}")
        
        # Setup labels
        labels = self.setup_repository_labels()
        if labels:
            results["actions_taken"].append(f"Created {len(labels)} standard labels")
        
        # Create milestone
        milestone = self.create_milestone_for_improvements()
        if milestone:
            results["actions_taken"].append(f"Created milestone: {milestone['title']}")
        
        # Create weekly status
        status_issue = self.create_weekly_status_issue()
        if status_issue:
            results["actions_taken"].append(f"Created weekly status report #{status_issue['number']}")
        
        print(f"✅ Health check complete! Took {len(results['actions_taken'])} actions.")
        return results 